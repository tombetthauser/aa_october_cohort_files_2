app/views/layouts/ APPLICATION.HTML.ERB

    once we reach the features specs we should only have to work on views

    we start with the application.html.erb partly because this is one that doesn't have direct specs
    technically we could write all of this in seperate views but it's much more efficient to just do it here
    everything we'll write will be in the body but before the yield

    the first thing well want to write is a conditional that will either show the following buttons
    Sign Out if a user is logged in
    Sign Up and Log In if a user is not logged in

        first well make an if else using out logged_in? method from the application controller
        if it returns true that means a user is logged in
        first we'll display the username by running our current_user in erb tags and cakking .username on it
        then well create a form whose action will be the session_url and whose method will be POST
        then well make our hidden auth_token input
        then well make our hidden method DELETE input
        then all we need is the submit input with the right text inside
        make your best guess on text and then correct based on failures, they'll be obvious
        dont bother going into spec files

        if the logged_in? returns false well just display two a tags
        the first will have the text for logging in and will have an href pointing to new_session_url
        the second a tag will be for signing up a new user and will point to new_user_url

    The only other thing we'll want to do here is render any errors that are flashed
    Well also do this with a conditional

        to show all our flashed errors well first make a condition to check if any exist
        then we can open a ul and make a .each on the flash[:errors]
        for each of these errors well just make an li that has the error in it in erb tags
        then close everythign up and were done

    ~12min, not timing, no notes, talked through
    ~6.7min no notes, one bug forgot action in form, 2sec fix, talked through
    ~6.9min no notes, one capy name bug, 2sec fix, talked through




    <% if logged_in? %>
        <%= current_user.username %>
        <form action="<%= session_url %>" method="POST">
            <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
            <input type="hidden" name="_method" value="DELETE">
            <input type="submit" value="Sign Out">
        </form>
        <% else %>
        <a href="<%= new_user_url %>">Log In</a>
        <a href="<%= new_session_url %>">Sign Up</a>
        <% end %>

        <% if flash[:errors] %>
        <ul>
            <% flash[:errors].each do |err| %>
            <li><%= err %></li>
            <% end %>
        </ul>
        <% end %>





app/views/ SESSIONS / NEW.HTML.ERB
app/views/ USERS / NEW.HTML.ERB


    these will constitute the Sign In and Sign Up pages
    they should be almost identicle

    each will only contain a title and a form

    the title comes from capybara and should be straight forward

    the form is going to have actions going to users_url and session_url respectively
    the method for both will be post
    then both will have a hidden auth_token input

    then a label for Username
    this will have the text for capybara and an text input
    the the name will be user[username] in both views
    this constitutes the nested keys in the params sent in the new POST request
    the value can be empty

    the second label will be similar and but with the text Password
    the type will be password and the name will be user[password]

    lastly outside the labels we will have our submit input
    this will have Sign Up and Sign In values respectively
    this is the only other difference, making 2 differences total

    4.2min no notes no bugs talked through
    4.6min no notes no real bugs (forgot to save) talked through
    3.4min no notes no bugs talked through



    <h2>Sign In</h2>

    <form action="<%= session_url %>" method="POST">
        <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
        <label>Username
            <input type="text" name="user[username]" value="">
        </label>
        <label>Password
            <input type="password" name="user[password]" value="">
        </label>
        <input type="submit" value="Sign In">
    </form>

    ___________

    <h2>Sign Up</h2>

    <form action="<%= users_url %>" method="POST">
        <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
        <label>Username
            <input type="text" name="user[username]" value="">
        </label>
        <label>Password
            <input type="password" name="user[password]" value="">
        </label>
        <input type="submit" value="Sign Up">
    </form>






app/views/LINKS (index show new edit)

    lets try to do these all at once
    new and edit are going to be almost identicle and are basically just forms like new in sessions and users
    index is stupidly easy and just shows all the links through a .each
    show is a bit tougher but only has a few parts
        the info for the title user and url for the link
        the form for adding a comment
        and then a .each rendering all the comments for that link

app / views / links / index.html.erb

    the index is first going to have a Links Index title
    itll then have a New Link a tag linking to the new_link_url
    then in a ul itll just .each over the links provided in @link
        each will render an li
        this li will contain an a tag of the links title linking to the link_url, passing in the link.id

        3.5min no bugs no notes

        <h2>Links Index</h2>
        <a href="<%= new_link_url %>">New Link</a>

        <ul>
            <% @links.each do |link| %>
                <li><a href="<%= link_url(link) %>"><%= link.title %></a></li>
            <% end %>
        </ul>

app / views / links / show.html.erb

    

app / views / links / new.html.erb
app / views / links / edit.html.erb




















TREVORS WALKTHROUGH

    MODELS

        writes all models and the application controller
            everything passes


    CONTROLLERS

        then he makes all his routes and all his controllers, defining the methods in terminal so views are created too (?)

        then he does the user controller, passes the specs, then the sessions controller, passes the specs
        for each of these he runs the specs first and fails them, looking at the shortest one line descriptions at the bottom of the rspec results

        moving on to links controller - the specs are not very descriptive - memorization is best -- as with the application controller and user model(?)
        the links controller will be exactly or almost exactly the same on the assessment
        pass the specs and move on
        now he runs the comments controller specs, writes them all memorized, passes them all after adding to the routes


    FEATURES

        now he moves on to the application.html.erb, which should be memorized
        then he starts writing his new user view and then starts running specs

        he doesn't try to pass all of them yet, he just looks for obvious capybara naming failures

        he copies over the new session form from the new user form and augments it slightly
        you should be able to pass all the specs at this point

        we arent passing until we get at least half way through the links_specs
        in the links_specs he seems to be able to depend more on the specs / failures to guide how hes writing his views
        he copies edit link from create link almost exactly
        at this point he passes all the links_specs and moves on

        at this point he's passed the assesment
        he runs the specs and goes spec for spec


    GENERAL ADVICE

        memorize everything except for the views
    
        user model and all methods
        5 methods on application controller
        all controllers can be memorized, should be almost identicle on test
        users controller will be almost identicle
        might be store items / ratings on assessment
        there will be a nested entity like the comments


        Memorization List

            user model methods
            app controller methods
            user and sessions controllers 
            application.html.erb